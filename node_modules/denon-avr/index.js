'use strict';

const net = require('net');

const PORT = 23;
const DELIMITER = '\r';

class DenonAvrIp {

  constructor(address) {
    this._address = address;
    this._sendQueue = [];
		this._currentSendQueueItem = undefined;
		this._rxBuffer = '';
  }

  connect() {
    return new Promise((resolve, reject) => {
      this._socket = net.connect(PORT, this._address);

  		this._socket
  		  .setTimeout(3000)
  			.once('connect', () => {
          resolve('Connected');
  			})
  			.once('timeout', () => {
  				this.disconnect().catch();
  				reject(new Error('timeout'));
  			})
  			.once('error', (err) => {
          this.disconnect().catch();
  				reject(err);
  			})
  			.on('data', (chunk) => {
  				this._rxBuffer += chunk;
  				this._parseRxBuffer();
  			})
    })
  }

  disconnect() {
    return new Promise((resolve, reject) => {
      if (!this._socket) {
        reject(new Error('not_connected'));
      }
      this._socket.once('end', () => {
        this._socket.destroy();
        resolve('Connection closed');
      });
      this._socket.end();
    })
	}

  _write(command) {
    return new Promise((resolve, reject) => {
      if (this._socket) {
        this._socket.once('data', result => {
          if (result) {
            resolve(result.toString().replace(DELIMITER, ''));
          } else {
            reject(new Error('No result'));
          }
        })
        this._socket.once('error', err => {
          reject(err);
        })
        setTimeout(() => {
          resolve('OK')
        }, 200);
        this._socket.write(command + DELIMITER);
      } else {
        reject(new Error('Not connected'));
      }

    })
  }

  _parseRxBuffer(data) {
    if (data) {
      console.log(data.toString());
    }
  }

  checkOnOff() {
    return this._write('PW?');
  }

  turnOnHeos() {
    return new Promise(async (resolve, reject) => {
      let result = await this._write('PWON');
      if (result) {
        await this._write('SINET');
        resolve(this._write('SI?'));
      } else {
        reject(new Error('No result from PWON'))
      }
    })
  }

  turnOff() {
    return this._write('PWSTANDBY');
  }

}

module.exports.DenonAvrIp = DenonAvrIp;
